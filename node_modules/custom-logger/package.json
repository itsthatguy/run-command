{
  "name": "custom-logger",
  "description": "Simple yet highly customizable console logger for node.js. Supports templating output, custom log levels, custom log types, and colored output.",
  "version": "0.2.1",
  "author": {
    "name": "Felix Milea-Ciobanu",
    "email": "felixmilea@gmail.com",
    "url": "http://felixmc.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/felixmc/custom-logger.git"
  },
  "main": "logger",
  "engines": {
    "node": ">=0.1.90"
  },
  "dependencies": {
    "colors": "0.6.0-1",
    "dateformat": "1.0.2-1.2.3"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "log",
    "logger",
    "logging",
    "color",
    "colour",
    "timestamp",
    "custom",
    "console",
    "warning",
    "error",
    "debug",
    "template"
  ],
  "_npmUser": {
    "name": "felixmc",
    "email": "felixmilea@gmail.com"
  },
  "_id": "custom-logger@0.2.1",
  "devDependencies": {},
  "optionalDependencies": {},
  "_engineSupported": true,
  "_npmVersion": "1.1.1",
  "_nodeVersion": "v0.6.11",
  "_defaultsLoaded": true,
  "dist": {
    "shasum": "8c45801908e9a6195564a425b56cb5bba93f7b5c",
    "tarball": "http://registry.npmjs.org/custom-logger/-/custom-logger-0.2.1.tgz"
  },
  "readme": "# custom-logger\n\n`custom-logger` is a simple, yet highly customizable logging plugin for node.js.\n\nI'm still very much still learning node.js, and this is my first \"official\" module. If you notice any unusual or depracated coding behaviors be sure to let me know, like I said, I'm still learning! (:\n\nIf you have any questions or feedback, or need any help using this module, please contact <a href=\"http://twitter.com/#!/felix_mc\" target=\"_blank\">@felix_mc</a>.\n\n\n## Basic Usage\n\n\tvar log = require('custom-logger').config({ level: 0 });\n\t\n\tlog.info( 'hello world!' );\n\t\n\tlog.warn( 'carefule there, world!' );\n\t\n\tlog.error( 'WHOA WHOA WHOA world?!' );\n\nThe above code will render to: \n\n![basic output snapshot](https://github.com/felixmc/custom-logger/raw/master/snapshots/basic.png)\n\n`custom-logger` uses logging levels and different event types to determine what is being outputed at any given time. Below are the default events and their respective logging levels:\n\n\t0 => info\n\t1 => warn\n\t2 => error\n\nAs you can see above, you can use the `level` parameter in the `config` method to set the current logging level. You can call the `config` method on the `log` object multiple times throughout your code to change the log level or other options.\n\n`custom-log` will only show events whose level is **equal to or higher** than the one set. For example a level of `0` will show all event types, whereas a level of `1` will only show the event types `warning` and `error`. By default the logging level is `0`.\n\n## Customizing Events Types\n\nOne cool thing you can do with `custom-logger` is you easily create your own additional event types:\n\n\tlog.new({\n\t\tdebugger: { level: 1, event: \"debug\", color: \"yellow\" }\n\t});\n\t\n\tlog.debugger( \"is this a bug?\" ); //outputs \"debug:  is this a bug?\"\n\nIn the parameters passed to the `new` method, the key (`debugger`) is the method to be added to the module, where as the `event` property is what is going to be displayed in the log as the event type. Don't the get two confused!\n\nYou can also overwrite the default events (`info`, `warn`, `error`) with your own if you'd like to:\n\n\tlog.new({\n\t\tinfo: { color: 'cyan', level: 0, event: 'info' },\n\t\tnotice: { color: 'yellow', level: 1, event: 'notice' },\n\t\twarn: { color: 'yellow', level: 2, event: 'warning' },\n\t\terror: { color: 'red', level: 3, event: 'ERROR' }\n\t});\n\nHowever, if all you you want to do is change some of the properties, you can also do the following:\n\n\tlog.info().config({ color: 'cyan' });\n\n\tlog.info('Hello World!'); //output should be cyan now\n\nMake sure not to pass anything to the `info` method when you are configuring it, otherwise you'll probably get an error. This is the only *ugly* part of the syntax (hopefully!), I will probably fix it at a later time.\n\n## Log Formatting\n\n### Template\n\nUsing `custom-logger` you can also configure how the console output will look like. It uses some simple templating patterns to do so:\n\n\t%event%     => the type of event being logged, such as \"info\" or \"warning\"\n\t%message%   => the message to be displayed, such as \"server started!\"\n\t%timestamp% => customizable datetime (see below) for when the event occured\n\t%padding%   => space characters that help align the current %event%. See details sections below for more\n\nBy default the format string is:\n\n\t%timestamp% - %event%:%padding%  %message%\n\t\nWhich produces the output:\n\n\t01:08:24 - info:      hello world!\n\t01:08:24 - warning:   carefule there, world!\n\t01:08:24 - error:     WHOA WHOA WHOA world?!\n\nYou can specify the output format like so:\n\n\tvar log = require('custom-logger').config({ format: \"%event% %padding%[%timestamp%]: %message%\" });\n\nWhich would output to:\n\n\tinfo    [01:06:26]:  hello world!\n\twarning [01:06:26]:  carefule there, world!\n\terror   [01:06:26]:  WHOA WHOA WHOA world?!\n\nIf you were to remove `%padding%` from the format string (which would result in `%event% [%timestamp%]: %message%`) the output would be:\n\n\tinfo [01:10:12]:  hello world!\n\twarning [01:10:12]:  carefule there, world!\n\terror [01:10:12]:  WHOA WHOA WHOA world?!\n\nI hope this helps illustrate the purpose of `%padding%`.\n\n### Timestamp\n\nYou can also modify the format of the actual `%timestamp%`. By default it's `HH:MM:ss`. You can change it as follows:\n\n\tvar log = require('custom-logger').config({ timestamp: \"h:MM:ss TT\" });\n\nWhich should look familiar to those familiar with date formatting in other programming languages. For more information on formatting the timestamp, see <a href=\"http://blog.stevenlevithan.com/archives/date-time-format\" target=\"_blank\">this</a>. Since this modules relies on the `dateFormat` library, any values valid for `dateFormat` should be valid here too.\n\n## Overwriting Global Config\n\nYou can also overwrite global settings for log template and timestamp format based on individual event types, either when you create them or by modifying existing ones:\n\n\tlog.new({\n\t\talert: { level: 3, color: 'red', event: 'alert', format: '!!!!!%event% : %message% !!!!!' }\n\t});\n\n\tlog.error().config({ timestamp: \"HH:MM:ss\" });\n\n## Further Details\n\n### Colors\n\nIf you'd like to further customize colors or formatting of your events, take a look at the <a href=\"https://github.com/Marak/colors.js\" target=\"_blank\">colors</a> modules that this module depends on. Any color/formatting value that's valid for that module, should be fine to pass to the `color` parameter when creating/configuring an event type.\n\n### Padding\n\nSay you have three event types with the `event` properties as follows: `info`, `warning`, `error`.\n\nThe `%padding%` value is going to be different for each of the events when they are displayed. The way it's calculated is that it finds the string length of the longest event, and subtracts it from the string length of the current event, and then returns a string containg that many spaces.\n\nFor examples, the longest string of the above events is `warning`, with 7 characters. Here's how it's being worked out:\n\n\tinfo.length = 4     ===>  7 - 4 = 3  ===> \"   \"\n\twarning.length = 7  ===>  7 - 7 = 0  ===> \"\"\n\terror.length = 5    ===>  7 - 5 = 2  ===> \"  \"\n\nIf this confuses you, don't worry much about it, you don't have to use it. I simply included it to make outputing to the console prettier.\n",
  "maintainers": [
    {
      "name": "felixmc",
      "email": "felixmilea@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "8c45801908e9a6195564a425b56cb5bba93f7b5c",
  "_from": "custom-logger@",
  "_resolved": "https://registry.npmjs.org/custom-logger/-/custom-logger-0.2.1.tgz"
}
